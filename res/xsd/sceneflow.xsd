<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- edited with XML Spy v4.3 U (http://www.xmlspy.com) by Patrick Gebhard (DFKI GmbH) -->
<xs:schema targetNamespace="xml.sceneflow.dfki.de" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="xml.sceneflow.dfki.de" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:element name="SceneFlow">
		<xs:annotation>
			<xs:documentation>The root element.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="SuperNode">
					<xs:sequence minOccurs="0">
						<xs:element name="UserCommands" type="UserCommands" minOccurs="0"/>
						<xs:element name="ClassPath" type="ClassPath" minOccurs="0"/>
						<xs:element name="InitContext" type="String" minOccurs="0"/>
					</xs:sequence>
					<xs:attribute name="context" type="String" use="optional" default="java.lang.Object"/>
					<xs:attribute name="package" type="String" use="optional"/>
					<xs:attribute name="scenefile" type="xs:string"/>
					<xs:attribute name="sceneinfo" type="xs:string"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="SuperNode">
		<xs:annotation>
			<xs:documentation>A super node.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Node">
				<xs:sequence>
					<xs:element name="Rules" type="Rules" minOccurs="0"/>
					<xs:choice minOccurs="0" maxOccurs="unbounded">
						<xs:element name="Node" type="Node"/>
						<xs:element name="SuperNode" type="SuperNode"/>
					</xs:choice>
				</xs:sequence>
				<xs:attribute name="start" type="String" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Node">
		<xs:annotation>
			<xs:documentation>A simple node.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="StartNodes" minOccurs="0">
				<xs:complexType>
					<xs:sequence maxOccurs="unbounded">
						<xs:element name="StartNode">
							<xs:complexType>
								<xs:attribute name="name" type="String" use="required"/>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="Define" type="Types"/>
			<xs:element name="Declare" type="Variables"/>
			<xs:element name="Commands" type="Commands"/>
			<xs:choice>
				<xs:sequence>
					<xs:element name="CEdge" type="CEdge" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="DEdge" minOccurs="0"/>
				</xs:sequence>
				<xs:element name="PEdge" type="PEdge" maxOccurs="unbounded"/>
				<xs:element name="FEdge" type="FEdge" maxOccurs="unbounded"/>
			</xs:choice>
			<xs:element name="IEdge" type="IEdge" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Graphics" type="NodeGraphics" minOccurs="0"/>
			<!--element:graphics added by Valentin 17.08.06;define location-->
		</xs:sequence>
		<xs:attribute name="id" type="String" use="required"/>
		<xs:attribute name="name" type="String" use="required"/>
		<xs:attribute name="exhaustive" type="Bool" use="optional" default="false"/>
		<xs:attribute name="preserving" type="Bool" use="optional" default="false"/>
		<xs:attribute name="history" type="Bool" use="optional" default="false"/>
		<xs:attribute name="comment" type="String" use="optional"/>
	</xs:complexType>
	<xs:complexType name="Edge" abstract="true">
		<xs:annotation>
			<xs:documentation>An edge.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Graphics" type="EdgeGraphics" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="target" type="String" use="required"/>
		<xs:attribute name="start" type="String" use="optional"/>
		<!--element:graphics added by Valentin 24.08.06;define location-->
	</xs:complexType>
	<xs:complexType name="FEdge">
		<xs:complexContent>
			<xs:extension base="Edge">
				<xs:sequence>
					<xs:element name="Commands" type="Commands" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CEdge">
		<xs:annotation>
			<xs:documentation>A conditional edge.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Edge">
				<xs:sequence>
					<xs:element ref="LogicalCondition"/>
					<xs:element name="Commands" type="Commands" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PEdge">
		<xs:annotation>
			<xs:documentation>A probability edge.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Edge">
				<xs:sequence>
					<xs:element name="Commands" type="Commands" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="probability" type="Probability" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IEdge">
		<xs:annotation>
			<xs:documentation>An interruptive edge.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Edge">
				<xs:sequence>
					<xs:element ref="Condition"/>
					<xs:element name="Commands" type="Commands" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TEdge">
		<xs:annotation>
			<xs:documentation>A timeout edge.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Edge">
				<xs:sequence>
					<xs:element name="Commands" type="Commands" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="timeout" type="Long" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="EEdge">
		<xs:annotation>
			<xs:documentation>An epsilon edge.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Edge">
				<xs:sequence>
					<xs:element name="Commands" type="Commands" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="DEdge" type="Edge" abstract="true">
		<xs:annotation>
			<xs:documentation>A placeholder for a default edge.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="TEdge" type="TEdge" substitutionGroup="DEdge">
		<xs:annotation>
			<xs:documentation>A timeout edge.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="EEdge" type="EEdge" substitutionGroup="DEdge">
		<xs:annotation>
			<xs:documentation>An epsilon edge.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="Rule">
		<xs:annotation>
			<xs:documentation>A rule. This is nothing else but a guarded
			command.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="Condition"/>
			<xs:element name="Commands" type="Commands"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Types">
		<xs:annotation>
			<xs:documentation>A sequence of type definitions.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element ref="Type"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Variables">
		<xs:annotation>
			<xs:documentation>A sequence of variable
			declarations.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="Variable" type="Variable"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Commands">
		<xs:annotation>
			<xs:documentation>A sequence of commands.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element ref="Command"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="UserCommands">
		<xs:annotation>
			<xs:documentation>A sequence of user command
			mappings.</xs:documentation>
		</xs:annotation>
		<xs:sequence maxOccurs="unbounded">
			<xs:element name="UserCommand" type="UserCommand"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="UserCommand">
		<xs:annotation>
			<xs:documentation>A user command mapping.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Argument" type="Argument" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="name" type="String" use="required"/>
		<xs:attribute name="classname" type="String" use="required"/>
		<xs:attribute name="method" type="String" use="optional" default="execute"/>
	</xs:complexType>
	<xs:complexType name="Argument">
		<xs:annotation>
			<xs:documentation>A pair of argument-name and
			argument-type</xs:documentation>
		</xs:annotation>
		<xs:attribute name="name" type="String" use="required"/>
		<xs:attribute name="type" type="String" use="required"/>
	</xs:complexType>
	<xs:complexType name="ClassPath">
		<xs:annotation>
			<xs:documentation>A list of directories or .jar files to add to the Java
			classpath</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ClassPathElement" type="String" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Rules">
		<xs:annotation>
			<xs:documentation>A sequence of rules.</xs:documentation>
		</xs:annotation>
		<xs:sequence maxOccurs="unbounded">
			<xs:element name="Rule" type="Rule"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Variable">
		<xs:annotation>
			<xs:documentation>Declaration of a single variable.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Abstract">
				<xs:sequence>
					<xs:element ref="Expression" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="name" type="String" use="required"/>
				<xs:attribute name="type" type="String" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Abstract" abstract="true">
		<xs:annotation>
			<xs:documentation>Base type for all commands and
			conditions.</xs:documentation>
		</xs:annotation>
	</xs:complexType>
	<xs:element name="Type" type="Abstract" abstract="true">
		<xs:annotation>
			<xs:documentation>Abstract type.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="StructType" substitutionGroup="Type">
		<xs:annotation>
			<xs:documentation>Struct type.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence maxOccurs="unbounded">
						<xs:element name="Member">
							<xs:complexType>
								<xs:attribute name="name" type="String" use="required"/>
								<xs:attribute name="type" type="String" use="required"/>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
					<xs:attribute name="name" type="String" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="ListType" substitutionGroup="Type">
		<xs:annotation>
			<xs:documentation>List type.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:attribute name="name" type="String" use="required"/>
					<xs:attribute name="type" type="String" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Command" type="Abstract" abstract="true">
		<xs:annotation>
			<xs:documentation>Abstract command.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="HistoryDeepClear" substitutionGroup="Command">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:attribute name="state" type="String" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="HistoryRunTimeOf" substitutionGroup="Expression">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract"/>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="HistoryValueOf" substitutionGroup="Expression">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:attribute name="node" type="String" use="required"/>
					<xs:attribute name="var" type="String" use="required"/>
					<xs:attribute name="depth" type="Int" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="HistoryContainsState" substitutionGroup="LogicalCondition">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:attribute name="state" type="String" use="required"/>
					<xs:attribute name="substate" type="String" use="required"/>
					<xs:attribute name="depth" type="Int" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="HistorySetDepth" substitutionGroup="Command">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:attribute name="state" type="String" use="required"/>
					<xs:attribute name="depth" type="Int" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="HistoryClear" substitutionGroup="Command">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:attribute name="state" type="String" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="PlaySceneGroup" substitutionGroup="Command">
		<xs:annotation>
			<xs:documentation>Play any scene of scenegroup command.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="UnblockSceneGroup" substitutionGroup="Command">
		<xs:annotation>
			<xs:documentation>Unblock a scenegroup.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="UnblockAllSceneGroups" substitutionGroup="Command">
		<xs:annotation>
			<xs:documentation>Unblock all scenegroups.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:attribute name="non-abstract" type="Bool" use="optional" default="true"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="UserCommand" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>A further unspecified user command.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element ref="Expression"/>
					</xs:sequence>
					<xs:attribute name="name" type="String" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Expression" type="Abstract" abstract="true" substitutionGroup="Command">
		<xs:annotation>
			<xs:documentation>Abstract expression.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Field" substitutionGroup="LValueExpression">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Expression"/>
					</xs:sequence>
					<xs:attribute name="name" type="String" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="LValueExpression" type="Abstract" abstract="true" substitutionGroup="Condition">
		<xs:annotation>
			<xs:documentation>An expression with an lvalue.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Variable" substitutionGroup="LValueExpression">
		<xs:annotation>
			<xs:documentation>A variable.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:attribute name="name" type="String" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Member" substitutionGroup="LValueExpression">
		<xs:annotation>
			<xs:documentation>A member of a struct.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Expression"/>
					</xs:sequence>
					<xs:attribute name="name" type="String" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Assign" substitutionGroup="Command">
		<xs:annotation>
			<xs:documentation>Assignment expression.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="LValueExpression"/>
						<xs:element name="Expression">
							<xs:complexType>
								<xs:sequence>
									<xs:element ref="Expression"/>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Constant" type="Abstract" abstract="true" substitutionGroup="Condition">
		<xs:annotation>
			<xs:documentation>Abstract constant.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Bool" substitutionGroup="Constant">
		<xs:annotation>
			<xs:documentation>Boolean constant.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:attribute name="value" type="Bool" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Int" substitutionGroup="Constant">
		<xs:annotation>
			<xs:documentation>Integer constant.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:attribute name="value" type="Int" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Float" substitutionGroup="Constant">
		<xs:annotation>
			<xs:documentation>Float constant.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:attribute name="value" type="Float" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="String" substitutionGroup="Constant">
		<xs:annotation>
			<xs:documentation>String constant.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:attribute name="value" type="StringConstant" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Struct" substitutionGroup="Constant">
		<xs:annotation>
			<xs:documentation>Struct constant.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence maxOccurs="unbounded">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="List" substitutionGroup="Constant">
		<xs:annotation>
			<xs:documentation>List constant.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence maxOccurs="unbounded">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Add" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Add two expressions.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Sub" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Subtract two expressions.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Mul" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Multiply two expressions.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Div" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Devide two expressions.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="If" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Conditional expression.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Condition"/>
						<xs:element name="Then">
							<xs:complexType>
								<xs:sequence>
									<xs:element ref="Expression"/>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="Else">
							<xs:complexType>
								<xs:sequence>
									<xs:element ref="Expression"/>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Random" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Generates a random integer between 0 (inclusive) and
			the given expression (exclusive).</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="AddFirst" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Add an element at the front of a
			list.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="AddLast" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Add an element at the back of a
			list.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Get" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Get element of list at given index.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="First" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Get the first element of a list.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Last" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Get the last element of a list.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Remove" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Remove the element at given index.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="RemoveFirst" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Remove the first element of a list.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="RemoveLast" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Remove the last element of a list.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Clear" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Clear list.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Size" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>List size expression.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="ContextQuery" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Perform a context query.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element ref="Expression"/>
					</xs:sequence>
					<xs:attribute name="name" type="String" use="required"/>
					<xs:attribute name="type" type="String" use="required"/>
					<xs:attribute name="local" type="Bool" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Condition" type="Abstract" abstract="true" substitutionGroup="Expression">
		<xs:annotation>
			<xs:documentation>Abstract condition.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="LogicalCondition" type="Abstract" abstract="true" substitutionGroup="Condition">
		<xs:annotation>
			<xs:documentation>Logical condition.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="DefaultCondition" substitutionGroup="LogicalCondition">
		<xs:annotation>
			<xs:documentation>A default empty logical condition</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="0">
						<xs:element ref="Condition"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Neg" substitutionGroup="Expression">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Not" substitutionGroup="LogicalCondition">
		<xs:annotation>
			<xs:documentation>Not condition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Condition"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="And" substitutionGroup="LogicalCondition">
		<xs:annotation>
			<xs:documentation>And condition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Condition"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Or" substitutionGroup="LogicalCondition">
		<xs:annotation>
			<xs:documentation>Or condition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Condition"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Lt" substitutionGroup="LogicalCondition">
		<xs:annotation>
			<xs:documentation>Lesser than condition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Le" substitutionGroup="LogicalCondition">
		<xs:annotation>
			<xs:documentation>Lesser equal condition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Eq" substitutionGroup="LogicalCondition">
		<xs:annotation>
			<xs:documentation>Equals condition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Ge" substitutionGroup="LogicalCondition">
		<xs:annotation>
			<xs:documentation>Greater equal condition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Neq" substitutionGroup="LogicalCondition">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Gt" substitutionGroup="LogicalCondition">
		<xs:annotation>
			<xs:documentation>Greater than condition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence minOccurs="2" maxOccurs="2">
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Empty" substitutionGroup="Condition">
		<xs:annotation>
			<xs:documentation>List is empty condition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="TemporalCondition" type="Abstract" abstract="true" substitutionGroup="Condition">
		<xs:annotation>
			<xs:documentation>Temporal conditions.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="StateCondition" substitutionGroup="LogicalCondition">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:attribute name="state" type="String" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="TimeoutCondition" substitutionGroup="TemporalCondition">
		<xs:annotation>
			<xs:documentation>Timeout condition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Abstract">
					<xs:sequence>
						<xs:element ref="Expression"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:simpleType name="Bool">
		<xs:annotation>
			<xs:documentation>Bool type.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:boolean">
			<xs:whiteSpace value="collapse" fixed="true"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Int">
		<xs:annotation>
			<xs:documentation>Integer type.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:int">
			<xs:whiteSpace value="collapse" fixed="true"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Long">
		<xs:annotation>
			<xs:documentation>Long type.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:long">
			<xs:whiteSpace value="collapse" fixed="true"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Float">
		<xs:annotation>
			<xs:documentation>Float type.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:float">
			<xs:whiteSpace value="collapse" fixed="true"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="String">
		<xs:annotation>
			<xs:documentation>String type (collapsed whitespace).</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:whiteSpace value="collapse" fixed="true"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="StringConstant">
		<xs:annotation>
			<xs:documentation>String constant (non-collapsed
			whitespace).</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:whiteSpace value="preserve" fixed="true"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Probability">
		<xs:annotation>
			<xs:documentation>Probability integer type (domain = [1,
			100]).</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:int">
			<xs:minInclusive value="0" fixed="true"/>
			<xs:maxInclusive value="100" fixed="true"/>
			<xs:whiteSpace value="collapse" fixed="true"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="EdgeGraphics">
		<xs:annotation>
			<xs:documentation>Edge graphic data</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Arrow">
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="Point">
							<xs:complexType>
								<xs:attribute name="x-pos" type="xs:int" use="required"/>
								<xs:attribute name="y-pos" type="xs:int" use="required"/>
								<xs:attribute name="control-x-pos" type="xs:int" use="required"/>
								<xs:attribute name="control-y-pos" type="xs:int" use="required"/>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="NodeGraphics">
		<xs:annotation>
			<xs:documentation>Node graphic data</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Position">
				<xs:complexType>
					<xs:attribute name="x-pos" type="xs:int" use="required"/>
					<xs:attribute name="y-pos" type="xs:int" use="required"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>
