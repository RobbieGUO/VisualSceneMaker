package de.dfki.vsm.model.configs;

import de.dfki.vsm.util.ios.IndentWriter;
import de.dfki.vsm.model.ModelObject;
import de.dfki.vsm.util.xml.XMLParseAction;
import de.dfki.vsm.util.xml.XMLParseError;
import de.dfki.vsm.util.xml.XMLWriteError;
import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import org.w3c.dom.Element;

/**
 * @author Gregor Mehlmann
 */
public class BasicConfig implements ModelObject {

    // The Agent Entry List   
    protected final ArrayList<ConfigEntry> mEntryList;

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public BasicConfig() {
        mEntryList = new ArrayList<>();
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public BasicConfig(final ArrayList<ConfigEntry> list) {
        mEntryList = list;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final void sort() {
        Collections.sort(mEntryList);
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final void append(final ConfigEntry entry) {
        mEntryList.add(entry);
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final void remove(final ConfigEntry entry) {
        mEntryList.remove(entry);
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final boolean contains(final ConfigEntry entry) {
        return mEntryList.contains(entry);
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final boolean containsKey(final String key) {
        for (final ConfigEntry entry : mEntryList) {
            if (entry.getKey().equals(entry)) {
                return true;
            }
        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final boolean containsVal(final String val) {
        for (final ConfigEntry entry : mEntryList) {
            if (entry.getVal().equals(val)) {
                return true;
            }
        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final String property(final String key) {
        for (final ConfigEntry entry : mEntryList) {
            if (entry.getKey().equals(key)) {
                return entry.getVal();
            }
        }
        return null;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final ArrayList<ConfigEntry> getEntryList() {
        return mEntryList;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    public final ArrayList<ConfigEntry> copyEntryList() {
        // Construct A List Copy      
        final ArrayList<ConfigEntry> copy = new ArrayList<>();
        // Copy Each Single Member      
        for (final ConfigEntry entry : mEntryList) {
            copy.add(entry.getCopy());
        }
        // Return The Final Clone     
        return copy;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    @Override
    public void writeXML(final IndentWriter stream) throws XMLWriteError {
        stream.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        stream.println("<BasicConfig>");
        stream.push();
        for (final ConfigEntry entry : mEntryList) {
            entry.writeXML(stream);
            stream.endl();
        }
        stream.pop().println("</BasicConfig>").flush();
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    @Override
    public void parseXML(final Element element) throws XMLParseError {
        XMLParseAction.processChildNodes(element, "Entry", new XMLParseAction() {
            @Override
            public void run(final Element element) throws XMLParseError {
                final ConfigEntry entry = new ConfigEntry();
                entry.parseXML(element);
                mEntryList.add(entry);
            }
        });
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    @Override
    public final String toString() {
        // Create A Byte Array Stream
        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        // Initialize The Indent Writer
        final IndentWriter stream = new IndentWriter(buffer);
        try {
            // Write Object
            writeXML(stream);
        } catch (XMLWriteError exc) {
            //mLogger.failure(exc.toString());
        }
        // Cleanup Stream and Writer
        stream.flush();
        stream.close();
        // Return String Representation
        try {
            return buffer.toString("UTF-8");
        } catch (Exception exc) {
            return buffer.toString();
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    @Override
    public BasicConfig getCopy() {
        return new BasicConfig(copyEntryList());
    }
}
